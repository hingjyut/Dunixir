defmodule ConfDTO do
  alias Constants.Contract, as: Contract
  alias Constants.PoW, as: PoW
  def defaultConf() do
    %{
      currency: nil,
      endpoints: [],
      rmEndpoints: [],
      upInterval: 3600 * 1000,
      c: Contract.c,
      dt: Contract.dt,
      dtReeval: Contract.dtReeval,
      ud0: Contract.ud0,
      stepMax: Contract.stepMax,
      sigPeriod: Contract.sigPeriod,
      sigReplay: Contract.sigReplay,
      sigValidity: Contract.sigValidity,
      msValidity: Contract.msValidity,
      sigQty: Contract.sigQty,
      xpercent: Contract.xpercent,
      percentRot: Contract.percentRot,
      powDelay: Contract.powDelay,
      avgGenTime: Contract.avgGenTime,
      dtDiffEval: Contract.dtDiffEval,
      medianTimeBlocks: Contract.medianTimeBlocks,
      httplogs: false,
      udid2: false,
      timeout: 3000,
      isolate: false,
      forksize: Contract.forSize,
      switchOnHeadAdvance: Contract.switchOnHeadAdvance,
      nonWoTPeersLimit: Contract.nonWoTPeersLimit,
      txsMempoolSize: Contract.txsMempoolSize()
    }
  end

  def mockConfDTO() do
    %{
      loglevel: "",
      currency: "",
      endpoints: [],
      rmEndpoints: [],
      rootoffset: 0,
      upInterval: 3600 * 1000,
      cpu: PoW.cpu,
      nbCores: 1,
      prefix: PoW.prefix,
      powSecurityRetryDelay: 0,
      powMaxHandicap: 0,
      c: Contract.c,
      dt: Contract.dt,
      dtReeval: Contract.dtReeval,
      dtDiffEval: 0,
      ud0: Contract.ud0,
      udTime0: 0,
      udReevalTime0: 0,
      stepMax: Contract.stepMax,
      sigPeriod: Contract.sigPeriod,
      sigReplay: Contract.sigReplay,
      msPeriod: 0,
      sigValidity: Contract.sigValidity,
      msValidity: Contract.msValidity,
      sigQty: Contract.sigQty,
      sigStock: Contract.sigStock,
      xpercent: Contract.xpercent,
      percentRot: Contract.percentRot,
      powDelay: Contract.powDelay,
      avgGenTime: Contract.avgGenTime,
      medianTimeBlocks: Contract.medianTimeBlocks,
      httplogs: false,
      timeout: 3000,
      isolate: false,
      udid2: false,
      timeout: 3000,
      isolate: false,
      forksize: Contract.forSize,
      idtyWindow: Contract.idtyWindow,
      msWindow: Contract.msWindow,
      sigWindow: Contract.sigWindow,
      switchOnHeadAdvance: 0,
      pair:  %{ pub: "", sec: "" },
      oldPair: nil,
      salt: "",
      passwd: "",
      remoteport: 0,
      remotehost: "",
      remoteipv4: "",
      remoteipv6: "",
      host: "",
      port: 0,
      ipv4: "",
      ipv6: "",
      dos: nil,
      upnp: false,
      homename: "",
      memory: true,
      nobma: true,
      bmaWithCrawler: false,
      nonWoTPeersLimit: 100,
      proxiesConf: nil,
      powNoSecurity: false,
      storage: nil,
      txsMempoolSize: nil
    }
  end
end
